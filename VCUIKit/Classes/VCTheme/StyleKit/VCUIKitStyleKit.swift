//
//  VCUIKitStyleKit.swift
//  VCUIKit
//
//  Created by Vitor Cesco on 13/04/17.
//  Copyright Â© 2017 Vitor Cesco. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class VCUIKitStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let navigationBarBackgroundColor: UIColor = VCUIKitStyleKit.blueBLOX
        static let navigationBarTintColor: UIColor = VCUIKitStyleKit.white
        static let navigationBarTitleColor: UIColor = VCUIKitStyleKit.white
        static let viewControllerViewBackgroundColor: UIColor = VCUIKitStyleKit.greyIOSLightGrey
        static let viewControllerViewTintColor: UIColor = VCUIKitStyleKit.blueIOS
        static let labelTextColor: UIColor = VCUIKitStyleKit.blackGray1
        static let labelBackgroundColor: UIColor = VCUIKitStyleKit.transparent
        static let tableViewBackgroundColor: UIColor = VCUIKitStyleKit.greyIOSLightGrey
        static let tableViewCellBackgroundColor: UIColor = VCUIKitStyleKit.white
        static let tableViewCellTintColor: UIColor = VCUIKitStyleKit.blueIOS
        static let tableViewCellTitleTextColor: UIColor = VCUIKitStyleKit.black
        static let tableViewDetailTextColor: UIColor = VCUIKitStyleKit.greyIOSPlaceholder
        static let signaturePickerViewControllerViewBackgroundColor: UIColor = VCUIKitStyleKit.white
        static let signaturePickerViewControllerStrokeColor: UIColor = VCUIKitStyleKit.black
        static let bannerSuccessBackgroundColor: UIColor = VCUIKitStyleKit.greenIOS
        static let bannerInfoBackgroundColor: UIColor = VCUIKitStyleKit.whiteGrey2.withAlpha(1)
        static let tabBarTintColor: UIColor = VCUIKitStyleKit.blueIOS
        static let alertTitleTextColor: UIColor = VCUIKitStyleKit.black
        static let alertMessageTextColor: UIColor = VCUIKitStyleKit.greyIOSContext
        static let alertViewTintColor: UIColor = VCUIKitStyleKit.blueIOS
        static let alertBackgroundColor: UIColor = VCUIKitStyleKit.white
        static let alertCancelButtonBackgroundColor: UIColor = VCUIKitStyleKit.blueBLOX
        static let alertCancelButtonTitleColor: UIColor = VCUIKitStyleKit.white
        static let alertButtonTitleColor: UIColor = VCUIKitStyleKit.white
        static let alertButtonBackgroundColor: UIColor = VCUIKitStyleKit.blueBLOX
        static let redIOS: UIColor = UIColor(red: 0.996, green: 0.220, blue: 0.141, alpha: 1.000)
        static let bannerDangerBackgroundColor: UIColor = VCUIKitStyleKit.redIOS
        static let greenIOS: UIColor = UIColor(red: 0.267, green: 0.859, blue: 0.369, alpha: 1.000)
        static let blueIOS: UIColor = UIColor(red: 0.000, green: 0.463, blue: 1.000, alpha: 1.000)
        static let black: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let blueBLOX: UIColor = UIColor(red: 0.231, green: 0.569, blue: 0.859, alpha: 1.000)
        static let whiteGrey1: UIColor = VCUIKitStyleKit.white.shadow(withLevel: 0.1)
        static let transparent: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)
        static let whiteGrey2: UIColor = VCUIKitStyleKit.whiteGrey1.shadow(withLevel: 0.1)
        static let blackGray1: UIColor = VCUIKitStyleKit.black.highlight(withLevel: 0.1)
        static let greyIOSPlaceholder: UIColor = UIColor(red: 0.780, green: 0.780, blue: 0.804, alpha: 1.000)
        static let greyIOSContext: UIColor = UIColor(red: 0.561, green: 0.557, blue: 0.580, alpha: 1.000)
        static let greyIOSLightGrey: UIColor = UIColor(red: 0.937, green: 0.937, blue: 0.957, alpha: 1.000)
        static let vCFlatUIButtonBackgroundColor: UIColor = VCUIKitStyleKit.blueBLOX
        static let vCFlatUIButtonShadowColor: UIColor = VCUIKitStyleKit.white
        static let hUDMessageTextColor: UIColor = VCUIKitStyleKit.white
        static let hUDTintColor: UIColor = VCUIKitStyleKit.white
        static let hUDBackgroundColor: UIColor = VCUIKitStyleKit.blueBLOX
        static let vCFlatUIButtonNormalTitleColor: UIColor = VCUIKitStyleKit.white
        static let vCFlatUIButtonPressedTitleColor: UIColor = VCUIKitStyleKit.white
        static let vCIconButtonFillColor: UIColor = VCUIKitStyleKit.white
    }

    //// Colors

    public dynamic class var navigationBarBackgroundColor: UIColor { return Cache.navigationBarBackgroundColor }
    public dynamic class var navigationBarTintColor: UIColor { return Cache.navigationBarTintColor }
    public dynamic class var navigationBarTitleColor: UIColor { return Cache.navigationBarTitleColor }
    public dynamic class var viewControllerViewBackgroundColor: UIColor { return Cache.viewControllerViewBackgroundColor }
    public dynamic class var viewControllerViewTintColor: UIColor { return Cache.viewControllerViewTintColor }
    public dynamic class var labelTextColor: UIColor { return Cache.labelTextColor }
    public dynamic class var labelBackgroundColor: UIColor { return Cache.labelBackgroundColor }
    public dynamic class var tableViewBackgroundColor: UIColor { return Cache.tableViewBackgroundColor }
    public dynamic class var tableViewCellBackgroundColor: UIColor { return Cache.tableViewCellBackgroundColor }
    public dynamic class var tableViewCellTintColor: UIColor { return Cache.tableViewCellTintColor }
    public dynamic class var tableViewCellTitleTextColor: UIColor { return Cache.tableViewCellTitleTextColor }
    public dynamic class var tableViewDetailTextColor: UIColor { return Cache.tableViewDetailTextColor }
    public dynamic class var signaturePickerViewControllerViewBackgroundColor: UIColor { return Cache.signaturePickerViewControllerViewBackgroundColor }
    public dynamic class var signaturePickerViewControllerStrokeColor: UIColor { return Cache.signaturePickerViewControllerStrokeColor }
    public dynamic class var bannerSuccessBackgroundColor: UIColor { return Cache.bannerSuccessBackgroundColor }
    public dynamic class var bannerInfoBackgroundColor: UIColor { return Cache.bannerInfoBackgroundColor }
    public dynamic class var tabBarTintColor: UIColor { return Cache.tabBarTintColor }
    public dynamic class var alertTitleTextColor: UIColor { return Cache.alertTitleTextColor }
    public dynamic class var alertMessageTextColor: UIColor { return Cache.alertMessageTextColor }
    public dynamic class var alertViewTintColor: UIColor { return Cache.alertViewTintColor }
    public dynamic class var alertBackgroundColor: UIColor { return Cache.alertBackgroundColor }
    public dynamic class var alertCancelButtonBackgroundColor: UIColor { return Cache.alertCancelButtonBackgroundColor }
    public dynamic class var alertCancelButtonTitleColor: UIColor { return Cache.alertCancelButtonTitleColor }
    public dynamic class var alertButtonTitleColor: UIColor { return Cache.alertButtonTitleColor }
    public dynamic class var alertButtonBackgroundColor: UIColor { return Cache.alertButtonBackgroundColor }
    public dynamic class var redIOS: UIColor { return Cache.redIOS }
    public dynamic class var bannerDangerBackgroundColor: UIColor { return Cache.bannerDangerBackgroundColor }
    public dynamic class var greenIOS: UIColor { return Cache.greenIOS }
    public dynamic class var blueIOS: UIColor { return Cache.blueIOS }
    public dynamic class var black: UIColor { return Cache.black }
    public dynamic class var white: UIColor { return Cache.white }
    public dynamic class var blueBLOX: UIColor { return Cache.blueBLOX }
    public dynamic class var whiteGrey1: UIColor { return Cache.whiteGrey1 }
    public dynamic class var transparent: UIColor { return Cache.transparent }
    public dynamic class var whiteGrey2: UIColor { return Cache.whiteGrey2 }
    public dynamic class var blackGray1: UIColor { return Cache.blackGray1 }
    public dynamic class var greyIOSPlaceholder: UIColor { return Cache.greyIOSPlaceholder }
    public dynamic class var greyIOSContext: UIColor { return Cache.greyIOSContext }
    public dynamic class var greyIOSLightGrey: UIColor { return Cache.greyIOSLightGrey }
    public dynamic class var vCFlatUIButtonBackgroundColor: UIColor { return Cache.vCFlatUIButtonBackgroundColor }
    public dynamic class var vCFlatUIButtonShadowColor: UIColor { return Cache.vCFlatUIButtonShadowColor }
    public dynamic class var hUDMessageTextColor: UIColor { return Cache.hUDMessageTextColor }
    public dynamic class var hUDTintColor: UIColor { return Cache.hUDTintColor }
    public dynamic class var hUDBackgroundColor: UIColor { return Cache.hUDBackgroundColor }
    public dynamic class var vCFlatUIButtonNormalTitleColor: UIColor { return Cache.vCFlatUIButtonNormalTitleColor }
    public dynamic class var vCFlatUIButtonPressedTitleColor: UIColor { return Cache.vCFlatUIButtonPressedTitleColor }
    public dynamic class var vCIconButtonFillColor: UIColor { return Cache.vCIconButtonFillColor }

    //// Drawing Methods

    public dynamic class func drawViewController(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 377, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 377, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 377, y: resizedFrame.height / 667)


        //// View Drawing
        let viewPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 377, height: 667))
        VCUIKitStyleKit.viewControllerViewBackgroundColor.setFill()
        viewPath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 130, width: 377, height: 34)
        let textTextContent = "Random Button"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Medium", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.viewControllerViewTintColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawNavigationBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 64), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 64)



        //// Image Declarations
        let image = UIImage(named: "image.png")!

        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 64)
        context.scaleBy(x: 1.54, y: -1.52)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 245.3, height: 42))
        context.saveGState()
        picturePath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -image.size.height)
        context.draw(image.cgImage!, in: CGRect(x: 0, y: 0, width: image.size.width, height: image.size.height))
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 377, height: 64))
        VCUIKitStyleKit.navigationBarBackgroundColor.setFill()
        rectangle3Path.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 339.71, y: 28, width: 30.93, height: 25)
        let labelTextContent = "Edit"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.navigationBarTintColor, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 169.95, y: 28, width: 39.15, height: 25)
        let label2TextContent = "Title"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Semibold", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.navigationBarTitleColor, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 27, y: 28, width: 30.07, height: 25)
        let label3TextContent = "Bac"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.navigationBarTintColor, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Label 4 Drawing
        let label4Rect = CGRect(x: 55.84, y: 28, width: 9.23, height: 25)
        let label4TextContent = "k"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .center
        let label4FontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.navigationBarTintColor, NSParagraphStyleAttributeName: label4Style]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.55, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 19.1, y: 30.5))
        bezier2Path.addLine(to: CGPoint(x: 21.11, y: 32.5))
        bezier2Path.addLine(to: CGPoint(x: 12.57, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 21.11, y: 49.5))
        bezier2Path.addLine(to: CGPoint(x: 19.1, y: 51.5))
        bezier2Path.addLine(to: CGPoint(x: 8.55, y: 41))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        VCUIKitStyleKit.navigationBarTintColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawNormalLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 232, height: 64), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 232, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 232, y: resizedFrame.height / 64)


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 1, width: 232, height: 63)
        let textPath = UIBezierPath(rect: textRect)
        VCUIKitStyleKit.labelBackgroundColor.setFill()
        textPath.fill()
        let textTextContent = "Lorem ipsum dolor"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 13)!, NSForegroundColorAttributeName: VCUIKitStyleKit.labelTextColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCollectionView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// View Drawing
        let viewPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 377, height: 667))
        UIColor.red.setFill()
        viewPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTableView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 377, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 377, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 377, y: resizedFrame.height / 667)


        //// View Drawing
        let viewPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 377, height: 667))
        VCUIKitStyleKit.tableViewBackgroundColor.setFill()
        viewPath.fill()


        //// TableViewCellDetail
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 166, width: 377, height: 54))
        VCUIKitStyleKit.tableViewCellBackgroundColor.setFill()
        rectangle2Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 349, y: 188.5))
        bezier5Path.addLine(to: CGPoint(x: 350.5, y: 187))
        bezier5Path.addLine(to: CGPoint(x: 357, y: 193.5))
        bezier5Path.addLine(to: CGPoint(x: 350.5, y: 200))
        bezier5Path.addLine(to: CGPoint(x: 349, y: 198.5))
        bezier5Path.addLine(to: CGPoint(x: 354, y: 193.5))
        bezier5Path.addLine(to: CGPoint(x: 349, y: 188.5))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        VCUIKitStyleKit.tableViewDetailTextColor.setFill()
        bezier5Path.fill()


        //// Detail Drawing
        let detailRect = CGRect(x: 287, y: 180, width: 53.05, height: 25)
        let detailTextContent = "Detail"
        let detailStyle = NSMutableParagraphStyle()
        detailStyle.alignment = .right
        let detailFontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.tableViewDetailTextColor, NSParagraphStyleAttributeName: detailStyle]

        let detailTextHeight: CGFloat = detailTextContent.boundingRect(with: CGSize(width: detailRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: detailFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: detailRect)
        detailTextContent.draw(in: CGRect(x: detailRect.minX, y: detailRect.minY + (detailRect.height - detailTextHeight) / 2, width: detailRect.width, height: detailTextHeight), withAttributes: detailFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 47, y: 179, width: 45, height: 25)
        let label2TextContent = "Title"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.tableViewCellTitleTextColor, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 21.05, y: 192.5))
        bezier4Path.addLine(to: CGPoint(x: 19.58, y: 194))
        bezier4Path.addLine(to: CGPoint(x: 23.5, y: 198))
        bezier4Path.addLine(to: CGPoint(x: 32.31, y: 189.5))
        bezier4Path.addLine(to: CGPoint(x: 30.85, y: 188))
        bezier4Path.addLine(to: CGPoint(x: 23.5, y: 195))
        bezier4Path.addLine(to: CGPoint(x: 21.05, y: 192.5))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        VCUIKitStyleKit.tableViewCellTintColor.setFill()
        bezier4Path.fill()




        //// TableViewCellAccessory
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 82, width: 377, height: 54))
        VCUIKitStyleKit.tableViewCellBackgroundColor.setFill()
        rectanglePath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 346.64, y: 120))
        bezier2Path.addCurve(to: CGPoint(x: 335.87, y: 109), controlPoint1: CGPoint(x: 340.7, y: 120), controlPoint2: CGPoint(x: 335.87, y: 115.08))
        bezier2Path.addCurve(to: CGPoint(x: 346.64, y: 98), controlPoint1: CGPoint(x: 335.87, y: 102.92), controlPoint2: CGPoint(x: 340.7, y: 98))
        bezier2Path.addCurve(to: CGPoint(x: 357.42, y: 109), controlPoint1: CGPoint(x: 352.59, y: 98), controlPoint2: CGPoint(x: 357.42, y: 102.92))
        bezier2Path.addCurve(to: CGPoint(x: 346.64, y: 120), controlPoint1: CGPoint(x: 357.42, y: 115.08), controlPoint2: CGPoint(x: 352.59, y: 120))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 346.64, y: 119))
        bezier2Path.addCurve(to: CGPoint(x: 356.44, y: 109), controlPoint1: CGPoint(x: 352.05, y: 119), controlPoint2: CGPoint(x: 356.44, y: 114.52))
        bezier2Path.addCurve(to: CGPoint(x: 346.64, y: 99), controlPoint1: CGPoint(x: 356.44, y: 103.48), controlPoint2: CGPoint(x: 352.05, y: 99))
        bezier2Path.addCurve(to: CGPoint(x: 336.85, y: 109), controlPoint1: CGPoint(x: 341.24, y: 99), controlPoint2: CGPoint(x: 336.85, y: 103.48))
        bezier2Path.addCurve(to: CGPoint(x: 346.64, y: 119), controlPoint1: CGPoint(x: 336.85, y: 114.52), controlPoint2: CGPoint(x: 341.24, y: 119))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 344.69, y: 106.5))
        bezier2Path.addLine(to: CGPoint(x: 347.62, y: 106.5))
        bezier2Path.addLine(to: CGPoint(x: 347.62, y: 114.5))
        bezier2Path.addLine(to: CGPoint(x: 348.6, y: 114.5))
        bezier2Path.addLine(to: CGPoint(x: 348.6, y: 115))
        bezier2Path.addLine(to: CGPoint(x: 344.69, y: 115))
        bezier2Path.addLine(to: CGPoint(x: 344.69, y: 114.5))
        bezier2Path.addLine(to: CGPoint(x: 345.66, y: 114.5))
        bezier2Path.addLine(to: CGPoint(x: 345.66, y: 107))
        bezier2Path.addLine(to: CGPoint(x: 344.69, y: 107))
        bezier2Path.addLine(to: CGPoint(x: 344.69, y: 106.5))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 346.4, y: 105))
        bezier2Path.addCurve(to: CGPoint(x: 345.18, y: 103.75), controlPoint1: CGPoint(x: 345.72, y: 105), controlPoint2: CGPoint(x: 345.18, y: 104.44))
        bezier2Path.addCurve(to: CGPoint(x: 346.4, y: 102.5), controlPoint1: CGPoint(x: 345.18, y: 103.06), controlPoint2: CGPoint(x: 345.72, y: 102.5))
        bezier2Path.addCurve(to: CGPoint(x: 347.62, y: 103.75), controlPoint1: CGPoint(x: 347.08, y: 102.5), controlPoint2: CGPoint(x: 347.62, y: 103.06))
        bezier2Path.addCurve(to: CGPoint(x: 346.4, y: 105), controlPoint1: CGPoint(x: 347.62, y: 104.44), controlPoint2: CGPoint(x: 347.08, y: 105))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        VCUIKitStyleKit.tableViewCellTintColor.setFill()
        bezier2Path.fill()


        //// Title Drawing
        let titleRect = CGRect(x: 47, y: 95, width: 105, height: 25)
        let titleTextContent = "Title"
        let titleStyle = NSMutableParagraphStyle()
        titleStyle.alignment = .left
        let titleFontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 17)!, NSForegroundColorAttributeName: VCUIKitStyleKit.tableViewCellTitleTextColor, NSParagraphStyleAttributeName: titleStyle]

        let titleTextHeight: CGFloat = titleTextContent.boundingRect(with: CGSize(width: titleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: titleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: titleRect)
        titleTextContent.draw(in: CGRect(x: titleRect.minX, y: titleRect.minY + (titleRect.height - titleTextHeight) / 2, width: titleRect.width, height: titleTextHeight), withAttributes: titleFontAttributes)
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 21.05, y: 108.5))
        bezier3Path.addLine(to: CGPoint(x: 19.58, y: 110))
        bezier3Path.addLine(to: CGPoint(x: 23.5, y: 114))
        bezier3Path.addLine(to: CGPoint(x: 32.31, y: 105.5))
        bezier3Path.addLine(to: CGPoint(x: 30.85, y: 104))
        bezier3Path.addLine(to: CGPoint(x: 23.5, y: 111))
        bezier3Path.addLine(to: CGPoint(x: 21.05, y: 108.5))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        VCUIKitStyleKit.tableViewCellTintColor.setFill()
        bezier3Path.fill()




        //// Group 2
        
        context.restoreGState()

    }

    public dynamic class func drawSignatureViewController(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 667, height: 375), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 667, height: 375), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 667, y: resizedFrame.height / 375)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 667, height: 375))
        VCUIKitStyleKit.signaturePickerViewControllerViewBackgroundColor.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 139, y: 164))
        bezierPath.addCurve(to: CGPoint(x: 195, y: 112), controlPoint1: CGPoint(x: 195, y: 112), controlPoint2: CGPoint(x: 139, y: 92))
        bezierPath.addCurve(to: CGPoint(x: 290, y: 216), controlPoint1: CGPoint(x: 251, y: 132), controlPoint2: CGPoint(x: 385, y: 128))
        bezierPath.addCurve(to: CGPoint(x: 450, y: 266), controlPoint1: CGPoint(x: 195, y: 304), controlPoint2: CGPoint(x: 410, y: 316))
        bezierPath.addCurve(to: CGPoint(x: 429, y: 112), controlPoint1: CGPoint(x: 490, y: 216), controlPoint2: CGPoint(x: 507, y: 112))
        bezierPath.addCurve(to: CGPoint(x: 290, y: 34), controlPoint1: CGPoint(x: 351, y: 112), controlPoint2: CGPoint(x: 210, y: 34))
        VCUIKitStyleKit.signaturePickerViewControllerStrokeColor.setStroke()
        bezierPath.lineWidth = 5.5
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawBannerSuccess(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 80), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 80)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 80))
        VCUIKitStyleKit.bannerSuccessBackgroundColor.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawBannerInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 80), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 80)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 80))
        VCUIKitStyleKit.bannerInfoBackgroundColor.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawBannerDanger(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 80), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 80)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 80))
        VCUIKitStyleKit.bannerDangerBackgroundColor.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTabBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 64), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 64)


        //// Label Drawing
        let labelRect = CGRect(x: 11.71, y: 39, width: 55.29, height: 25)
        let labelTextContent = "Contacts"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 11)!, NSForegroundColorAttributeName: VCUIKitStyleKit.tabBarTintColor, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 100.21, y: 39, width: 55.29, height: 25)
        let label2TextContent = "Recents"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 11)!, NSForegroundColorAttributeName: VCUIKitStyleKit.tabBarTintColor, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 186.71, y: 39, width: 55.29, height: 25)
        let label3TextContent = "Settings"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .center
        let label3FontAttributes = [NSFontAttributeName: UIFont(name: "SFUIText-Regular", size: 11)!, NSForegroundColorAttributeName: VCUIKitStyleKit.tabBarTintColor, NSParagraphStyleAttributeName: label3Style]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 26, y: 13, width: 26, height: 26), cornerRadius: 4)
        VCUIKitStyleKit.tabBarTintColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 115, y: 13, width: 26, height: 26), cornerRadius: 4)
        VCUIKitStyleKit.tabBarTintColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 201.5, y: 13, width: 26, height: 26), cornerRadius: 4)
        VCUIKitStyleKit.tabBarTintColor.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawVCFlatUIButtonNormal(vCFlatUIButtonSize: CGSize = CGSize(width: 200, height: 44), vCFlatUIButtonShadowHeight: CGFloat = 3, vCFlatUIButtonCornerRadius: CGFloat = 6) {

        //// Variable Declarations
        let vCFlatButtonNormalFrontShapeHeight: CGFloat = vCFlatUIButtonSize.height - vCFlatUIButtonShadowHeight

        //// Back Drawing
        let backPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: vCFlatUIButtonSize.width, height: vCFlatUIButtonSize.height), cornerRadius: vCFlatUIButtonCornerRadius)
        VCUIKitStyleKit.vCFlatUIButtonShadowColor.setFill()
        backPath.fill()


        //// Front Drawing
        let frontPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: vCFlatUIButtonSize.width, height: vCFlatButtonNormalFrontShapeHeight), cornerRadius: vCFlatUIButtonCornerRadius)
        VCUIKitStyleKit.vCFlatUIButtonBackgroundColor.setFill()
        frontPath.fill()
    }

    public dynamic class func drawVCFlatUIButtonPressed(vCFlatUIButtonSize: CGSize = CGSize(width: 200, height: 44), vCFlatUIButtonShadowHeight: CGFloat = 3, vCFlatUIButtonCornerRadius: CGFloat = 6) {

        //// Variable Declarations
        let vCFlatUIButtonPressedFrontYPosition: CGFloat = vCFlatUIButtonShadowHeight / 3.0
        let vCFlatButtonPressedFrontShapeHeight: CGFloat = vCFlatUIButtonSize.height - vCFlatUIButtonPressedFrontYPosition

        //// Back Drawing
        let backPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: vCFlatUIButtonSize.width, height: vCFlatUIButtonSize.height), cornerRadius: vCFlatUIButtonCornerRadius)
        VCUIKitStyleKit.vCFlatUIButtonShadowColor.setFill()
        backPath.fill()


        //// Front Drawing
        let frontPath = UIBezierPath(roundedRect: CGRect(x: 0, y: vCFlatUIButtonPressedFrontYPosition, width: vCFlatUIButtonSize.width, height: vCFlatButtonPressedFrontShapeHeight), cornerRadius: vCFlatUIButtonCornerRadius)
        VCUIKitStyleKit.vCFlatUIButtonBackgroundColor.setFill()
        frontPath.fill()
    }

    public dynamic class func drawRoundedXIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 66.07, y: 31.25))
        bezierPath.addLine(to: CGPoint(x: 60.57, y: 31.25))
        bezierPath.addLine(to: CGPoint(x: 50.09, y: 46.82))
        bezierPath.addLine(to: CGPoint(x: 49.91, y: 46.82))
        bezierPath.addLine(to: CGPoint(x: 39.57, y: 31.25))
        bezierPath.addLine(to: CGPoint(x: 33.74, y: 31.25))
        bezierPath.addLine(to: CGPoint(x: 46.76, y: 50.4))
        bezierPath.addLine(to: CGPoint(x: 46.76, y: 50.58))
        bezierPath.addCurve(to: CGPoint(x: 46.39, y: 51.13), controlPoint1: CGPoint(x: 46.76, y: 50.58), controlPoint2: CGPoint(x: 46.64, y: 50.77))
        bezierPath.addCurve(to: CGPoint(x: 45.43, y: 52.54), controlPoint1: CGPoint(x: 46.17, y: 51.46), controlPoint2: CGPoint(x: 45.85, y: 51.93))
        bezierPath.addCurve(to: CGPoint(x: 42.14, y: 57.39), controlPoint1: CGPoint(x: 44.55, y: 53.85), controlPoint2: CGPoint(x: 43.45, y: 55.47))
        bezierPath.addCurve(to: CGPoint(x: 38.21, y: 63.18), controlPoint1: CGPoint(x: 40.84, y: 59.32), controlPoint2: CGPoint(x: 39.53, y: 61.25))
        bezierPath.addCurve(to: CGPoint(x: 34.91, y: 68.04), controlPoint1: CGPoint(x: 36.89, y: 65.11), controlPoint2: CGPoint(x: 35.79, y: 66.73))
        bezierPath.addCurve(to: CGPoint(x: 33.58, y: 70), controlPoint1: CGPoint(x: 34.02, y: 69.35), controlPoint2: CGPoint(x: 33.58, y: 70))
        bezierPath.addLine(to: CGPoint(x: 39.06, y: 70))
        bezierPath.addLine(to: CGPoint(x: 49.5, y: 54.56))
        bezierPath.addLine(to: CGPoint(x: 49.69, y: 54.56))
        bezierPath.addLine(to: CGPoint(x: 59.98, y: 70))
        bezierPath.addLine(to: CGPoint(x: 65.78, y: 70))
        bezierPath.addLine(to: CGPoint(x: 52.7, y: 50.8))
        bezierPath.addLine(to: CGPoint(x: 52.7, y: 50.64))
        bezierPath.addLine(to: CGPoint(x: 66.07, y: 31.25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 100, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 100, y: 77.61), controlPoint2: CGPoint(x: 77.61, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 100), controlPoint2: CGPoint(x: 0, y: 77.61))
        bezierPath.addCurve(to: CGPoint(x: 19.89, y: 10.08), controlPoint1: CGPoint(x: 0, y: 33.69), controlPoint2: CGPoint(x: 7.81, y: 19.2))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 28.27, y: 3.75), controlPoint2: CGPoint(x: 38.7, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 0), controlPoint2: CGPoint(x: 100, y: 22.39))
        bezierPath.close()
        VCUIKitStyleKit.vCIconButtonFillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc(VCUIKitStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
